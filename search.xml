<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>伦敦生活 - 献给爱无能者的花束</title>
      <link href="/2024/04/20/fleabag/"/>
      <url>/2024/04/20/fleabag/</url>
      
        <content type="html"><![CDATA[<h1 id="Fleabag"><a href="#Fleabag" class="headerlink" title="Fleabag"></a>Fleabag</h1><p><em><strong>Love isn’t something that weak people do.  | 弱者不擅长爱。</strong></em></p><img src="/2024/04/20/fleabag/pic1.jpg" class="" title="背景图"><p>生活不如意，也可以看《伦敦生活》！</p><p>这是一部不管我看多少遍，仍然会在每一集都有所思考的英剧。《伦敦生活》与其他丧喜剧不同，它并非简单地将主角置于阴郁、幽默和嘲讽的背景中，而是以更深入的方式凸显出角色的复杂性和真实性。每个角色都有自己的缺陷和执拗之处，正是这些特质赋予了他们独特的魅力。</p><img src="/2024/04/20/fleabag/pic4.png" class="" title="背景图"><p>Fleabag 偷窃成瘾、懒惰、滥交，很多生活中的潦倒和困境大多都出于她自身人格在道德上的缺陷，这里有原生家庭的影响，更多的要归咎于她自身，比如好友的惨死。<br>有人说在 Fleabag 身上看到自己，不如说，我们都能在她身上看到自己的某一面。  鄙夷fleabag，她自毁倾向显著，关键时刻掉链子；  喜欢fleabag，她幽默善良，为家人挺身而出，把路边醉倒的女生送上车；羡慕 Fleabag，她即使孤独，却有“第四面墙”的观众可以倾诉。  她常常游离于现实的伦敦生活之外，而只有神父发现了这一点。</p><img src="/2024/04/20/fleabag/pic5.png" class="" title="背景图"><p>女主作为一个在伦敦努力生活的女性，成了每一个在大都市中挣扎的普通人的镜像。对于面临的种种困境，我们装作不在乎，强迫自己对每个半生不熟的人报以微笑，然后转身投入自己跌跌撞撞的生活。对每一个为生活疲于奔命的人来说，爱情是勇敢者的游戏。</p><p>可又如同该剧的另一个译名“脱线人生”，女主活得放飞而洒脱。</p><img src="/2024/04/20/fleabag/pic8.png" class="" title="背景图"><p>她敢于打破规则，会在继母的餐会上摔碎酒杯，也会为了给姐姐打抱不平而拳击姐夫。如果说第一季讲的是现代女性沉重的精神压力，那么第二季神父角色的引入，似乎意味着要为这个难解之题寻得一种救赎。</p><p><em><strong>What do guinea pigs do? They are born, they shit themselves with fear and then they die. | 豚鼠们日常都做什么？他们出生，然后活在恐惧中，最后死掉。</strong></em></p><p>剧里有对当代人面临的种种复杂情感的思考，有对女性面临的性别困境、自我认同、亲密关系等问题的深刻探讨。女主面对家庭的冷漠、职场的竞争、人际关系的复杂，以及最深层的——对爱和性的迷茫。</p><p>对亲密关系细腻又冷静地解剖，是整部剧最迷人的部分。</p><img src="/2024/04/20/fleabag/pic.jpg" class="" title="背景图"><p>女主和神父的关系，从禁忌到浪漫，从痛苦到疗愈，充满了情欲的张力，又不乏真挚的情感和温柔的关怀。女主是能动的，她有自己的欲望和需求、痛苦和挣扎，她从不被动地等待男性的拯救和评判。因此，当故事迎来一个如此克制而又温存、无情而又美丽的结局时，并不令人伤感，而是感到分外完整。每一个人物都完成了弧光塑造。爱最终从和他者的连结回到对自我的认同。  </p><p><em><strong>I think you know how to love better than any of us.  That’s why you find it all so painful. | 我觉得你比任何人都懂如何去爱，所以才会发现爱是如此痛苦。</strong></em></p><p>像结局这样抽离冷峻但又真实坚韧的美感是本剧贯穿始终的特点。才华横溢的女主角菲比同时也是本剧的编剧，她巧妙地运用了打破「第四面墙」这样的独特叙述视角，通过不断和镜头前的观众对话，来分享主角内心深处的忧虑、幸福和悲伤。这种与观众间的亲密互动，让整部剧集在处理喜剧效果、戏剧冲突和沉重情感的平衡时显得游刃有余。</p><p>女主是这部剧的编剧，她在剧中表达了很多犀利的女性的思考，其中有一段：</p><p>“<em>女性的痛苦是与生俱来的，是生理上注定要遭受的，比如，生理期痛、胸痛、分娩痛，你知道的。  这些疼痛将贯穿我们一生。男人则不用承受，所以他们自己去寻找痛苦。他们编造了上帝和地狱的说辞，为的就是感受愧疚和罪恶带来的痛苦，但女性生来就总会愧疚。他们创造了战争，就是为了让彼此感受到疼痛。没有战争的时候他们就打橄榄球。  而我们身体里周期性的痛苦一直存在，年复一年。  当你终于能和这些痛苦和解的时候，绝经来了，它是这个世界上最美好的事情！虽然骨盆会有些坍塌，虽然你打扮的漂亮也没人撩你。  但你自由了，不再是个奴隶，不再是生育机器</em>。“</p><img src="/2024/04/20/fleabag/pic2.png" class="" title="背景图"><p>不是每个人都能拿到逆风翻盘的大女主剧本，这部剧像是一盆冷水，告诉我们：生活再糟糕，也得自己去面对，别期待被谁拯救。</p><p>Fleabag 绝对是给女性的一份礼物，是我们生活的坦白书。</p><p>孤独的人得到慰藉，忙碌的人得到安抚。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hobby </tag>
            
            <tag> entertainment </tag>
            
            <tag> 英剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL 简介</title>
      <link href="/2024/04/20/postgreSQL/"/>
      <url>/2024/04/20/postgreSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h1><p>PostgreSQL 是一个强大的开源关系型数据库管理系统，具有高度的可靠性、稳定性和性能，被广泛应用于各种规模的应用程序和项目中。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>开源：PostgreSQL 是一个完全开源的数据库管理系统，拥有强大的社区支持和开发生态系统。  </p></li><li><p>可扩展性：支持水平和垂直扩展，可以轻松地扩展以满足不同规模的应用需求。 </p></li><li><p>ACID 兼容：支持事务处理和 ACID（原子性、一致性、隔离性、持久性）特性，确保数据的完整性和一致性。 </p></li><li><p>多种数据类型：支持各种数据类型，包括整数、浮点数、字符串、日期时间、JSON、XML 等，同时还支持自定义数据类型。 </p></li><li><p>多版本并发控制（MVCC）：使用 MVCC 技术实现高效的并发控制，可以处理大量并发访问。 </p></li><li><p>多种索引类型：支持多种索引类型，包括 B 树、哈希、GiST、GIN 等，提供了灵活和高效的数据检索功能。 </p></li><li><p>安全性：提供了多层次的安全性控制机制，包括角色、权限、SSL 加密等，确保数据的安全性和隐私保护。</p></li></ul><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><p>安装 PostgreSQL 可以通过官方网站提供的安装程序或者包管理工具进行安装。安装完成后，可以使用 psql 命令行工具或者图形界面工具连接和管理数据库。</p><h2 id="PostgreSQL-存储引擎"><a href="#PostgreSQL-存储引擎" class="headerlink" title="PostgreSQL 存储引擎"></a>PostgreSQL 存储引擎</h2><p>PostgreSQL 的存储引擎是其核心组件之一，它负责管理数据在磁盘上的存储和检索。PostgreSQL 使用了一种称为 WAL（Write-Ahead Logging）的技术来确保数据的持久性和一致性。在 WAL 中，所有的数据修改操作都会首先写入到事务日志文件（WAL 日志），然后再写入到数据文件中。这种方式可以确保即使系统崩溃或意外断电，数据库也可以通过重放 WAL 日志来恢复数据，并保持数据库的一致性。</p><p>此外，PostgreSQL 支持多种存储引擎，包括 B 树索引、哈希索引、GiST 索引和 GIN 索引等。每种索引类型都有其特定的优势和适用场景。例如，B 树索引适用于范围查询和排序操作，而 GiST 索引适用于空间数据类型的查询。</p><h3 id="1-数据文件组织"><a href="#1-数据文件组织" class="headerlink" title="1. 数据文件组织"></a>1. 数据文件组织</h3><p>PostgreSQL 的数据文件组织采用了类似于传统关系型数据库的方式，数据被组织成表、索引和视图等对象，并存储在相应的数据文件中。每个数据库包含一个或多个数据文件，其中包括数据文件、事务日志文件（WAL 日志）和配置文件等。数据文件通常以 <code>.dat</code> 或 <code>.pg</code> 后缀为扩展名。</p><h3 id="2-存储格式"><a href="#2-存储格式" class="headerlink" title="2. 存储格式"></a>2. 存储格式</h3><p>PostgreSQL 使用了一种称为 MVCC（Multi-Version Concurrency Control）的机制来实现事务的隔离和并发控制。在 MVCC 中，每个事务都会看到数据库的一个版本，而不同事务之间不会互相干扰。为了实现 MVCC，PostgreSQL 在数据文件中存储了多个版本的数据，每个版本都包含了事务开始和结束的时间戳信息，以及其他相关的元数据。</p><h3 id="3-索引结构"><a href="#3-索引结构" class="headerlink" title="3. 索引结构"></a>3. 索引结构</h3><p>PostgreSQL 支持多种索引结构，包括 B 树索引、哈希索引、GiST 索引和 GIN 索引等。每种索引结构都有其特定的优势和适用场景。例如，B 树索引适用于范围查询和排序操作，而 GiST 索引适用于空间数据类型的查询。</p><h3 id="4-WAL-日志"><a href="#4-WAL-日志" class="headerlink" title="4. WAL 日志"></a>4. WAL 日志</h3><p>WAL（Write-Ahead Logging）是 PostgreSQL 实现持久性和一致性的关键技术之一。在 WAL 中，所有的数据修改操作都会首先写入到事务日志文件（WAL 日志），然后再写入到数据文件中。这种方式可以确保即使系统崩溃或意外断电，数据库也可以通过重放 WAL 日志来恢复数据，并保持数据库的一致性。</p><h3 id="5-存储管理"><a href="#5-存储管理" class="headerlink" title="5. 存储管理"></a>5. 存储管理</h3><p>PostgreSQL 提供了丰富的存储管理功能，包括表空间管理、自动扩展、数据压缩和数据加密等。表空间管理可以将数据文件分组存储在不同的物理位置，以便对数据进行更灵活的管理和优化。自动扩展功能可以根据数据库的使用情况动态调整数据文件的大小，以确保数据库系统的性能和稳定性。</p><h3 id="6-备份和恢复"><a href="#6-备份和恢复" class="headerlink" title="6. 备份和恢复"></a>6. 备份和恢复</h3><p>PostgreSQL 提供了多种备份和恢复机制，包括在线备份、热备份和逻辑备份等。在线备份可以在数据库正常运行的情况下进行备份操作，而热备份可以实现实时备份和恢复。逻辑备份则可以备份和恢复数据库中的逻辑数据，例如表、索引和视图等。</p><h3 id="7-性能优化"><a href="#7-性能优化" class="headerlink" title="7. 性能优化"></a>7. 性能优化</h3><p>PostgreSQL 提供了丰富的性能优化功能，包括查询优化器、索引优化、并发控制和事务管理等。查询优化器可以分析查询语句并生成最优的执行计划，以提高查询的性能和效率。索引优化可以选择合适的索引结构和优化索引的使用方式，从而提高数据检索的速度和效率。</p><h3 id="8-扩展性和容错性"><a href="#8-扩展性和容错性" class="headerlink" title="8. 扩展性和容错性"></a>8. 扩展性和容错性</h3><p>PostgreSQL 具有良好的扩展性和容错性，可以在不同的硬件和操作系统上部署和运行。它支持主从复制、流复制和逻辑复制等多种复制机制，可以实现数据的实时备份和恢复。此外，PostgreSQL 还支持分布式事务和分布式查询等功能，可以满足不同规模和复杂度的应用需求。</p><h2 id="PostgreSQL-查询优化器"><a href="#PostgreSQL-查询优化器" class="headerlink" title="PostgreSQL 查询优化器"></a>PostgreSQL 查询优化器</h2><p>PostgreSQL 查询优化器是数据库引擎中的一个重要组成部分，它负责分析用户提交的查询语句，并生成最优的执行计划，以提高查询的性能和效率。在执行查询之前，优化器会对查询进行多次优化和重写，以选择最合适的执行路径和访问方法。</p><h3 id="1-查询解析"><a href="#1-查询解析" class="headerlink" title="1. 查询解析"></a>1. 查询解析</h3><p>查询优化的第一步是查询解析，优化器会对用户提交的查询语句进行解析和分析，了解查询的语法结构和语义含义。在解析过程中，优化器会识别查询中涉及的表、列和条件等元素，并构建相应的查询树或查询图。</p><h3 id="2-查询重写"><a href="#2-查询重写" class="headerlink" title="2. 查询重写"></a>2. 查询重写</h3><p>在查询解析之后，优化器会进行查询重写，将查询语句转换成一个或多个等价的查询表达式。查询重写的目的是消除冗余和不必要的操作，简化查询的执行路径和访问方法。例如，优化器可能会合并相邻的条件、消除子查询或转换连接方式等。</p><h3 id="3-执行计划生成"><a href="#3-执行计划生成" class="headerlink" title="3. 执行计划生成"></a>3. 执行计划生成</h3><p>查询优化的核心任务是生成最优的执行计划，即确定查询的执行路径和访问方法。优化器会根据查询的特性、表的统计信息和系统资源等因素，评估不同的执行路径，并选择成本最低的执行计划。常见的执行计划包括顺序扫描、索引扫描、哈希连接和排序等。</p><h3 id="4-代价估算"><a href="#4-代价估算" class="headerlink" title="4. 代价估算"></a>4. 代价估算</h3><p>在生成执行计划之前，优化器会对每个可能的执行路径进行代价估算，以评估执行该路径所需的资源消耗和时间成本。代价估算通常基于表的统计信息和系统配置参数等信息，例如表的行数、索引的选择性和系统负载等。优化器会选择具有最低代价的执行计划作为最终的执行方案。</p><h3 id="5-查询优化策略"><a href="#5-查询优化策略" class="headerlink" title="5. 查询优化策略"></a>5. 查询优化策略</h3><p>PostgreSQL 查询优化器采用了多种优化策略和算法，包括动态规划、贪心算法和启发式算法等。优化器会根据查询的复杂度和数据分布等因素，选择合适的优化策略和算法，以提高查询的性能和效率。同时，优化器还会考虑系统的实时负载和资源限制等因素，以保证查询的稳定性和可靠性。</p><h3 id="6-自适应查询优化"><a href="#6-自适应查询优化" class="headerlink" title="6. 自适应查询优化"></a>6. 自适应查询优化</h3><p>除了静态查询优化之外，PostgreSQL 还支持自适应查询优化功能，即根据查询的执行情况动态调整优化策略和执行计划。通过监控查询的实际执行效果和系统资源利用率等指标，优化器可以动态调整查询的执行路径和访问方法，以适应不同的查询负载和数据分布情况。</p><h3 id="7-实时统计信息"><a href="#7-实时统计信息" class="headerlink" title="7. 实时统计信息"></a>7. 实时统计信息</h3><p>为了支持自适应查询优化，PostgreSQL 还提供了实时统计信息收集功能，可以动态监控表的数据变化和查询的执行效果。通过收集和分析实时统计信息，优化器可以及时调整执行计划和优化策略，以保证查询的性能和效率。同时，实时统计信息还可以用于系统性能监控和故障排查等用途。</p><h2 id="PostgreSQL-并发控制"><a href="#PostgreSQL-并发控制" class="headerlink" title="PostgreSQL 并发控制"></a>PostgreSQL 并发控制</h2><p>PostgreSQL 使用了 MVCC（Multi-Version Concurrency Control）技术来实现并发控制。MVCC 可以在不加锁的情况下实现高并发的读写操作，从而提高了系统的并发性能。在 MVCC 中，每个事务都会看到数据库的一个版本，事务之间不会互相干扰。当一个事务对数据进行修改时，PostgreSQL 会创建数据的新版本，并将旧版本标记为不可见。这样可以确保读操作不会受到写操作的影响，从而实现了高并发的访问控制。</p><h3 id="1-事务管理"><a href="#1-事务管理" class="headerlink" title="1. 事务管理"></a>1. 事务管理</h3><p>在 PostgreSQL 中，每个数据库操作都是通过事务进行管理的。事务是数据库系统中的一个基本单位，用于对数据库的读写操作进行分组和管理。事务具有四个特性，即原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），通常缩写为 ACID。</p><h3 id="2-并发控制方法"><a href="#2-并发控制方法" class="headerlink" title="2. 并发控制方法"></a>2. 并发控制方法</h3><p>PostgreSQL 使用了多种并发控制方法，以实现高效的并发访问和操作。常见的并发控制方法包括锁机制、多版本并发控制（MVCC）和事务隔离级别等。</p><h4 id="2-1-锁机制"><a href="#2-1-锁机制" class="headerlink" title="2.1 锁机制"></a>2.1 锁机制</h4><p>PostgreSQL 使用锁机制来管理事务之间的并发访问。锁分为共享锁和排他锁两种类型，用于控制事务对数据库对象的读写权限。在并发执行过程中，事务可以通过获取和释放锁来保证数据的一致性和隔离性。常见的锁包括行级锁、表级锁和页级锁等。</p><h4 id="2-2-多版本并发控制（MVCC）"><a href="#2-2-多版本并发控制（MVCC）" class="headerlink" title="2.2 多版本并发控制（MVCC）"></a>2.2 多版本并发控制（MVCC）</h4><p>多版本并发控制是 PostgreSQL 中的一种高级并发控制技术，用于实现事务的隔离和并发执行。在 MVCC 中，每个事务操作都会生成一个新版本的数据副本，而不是直接修改原始数据。这样可以实现事务的隔离性，避免读写冲突和死锁问题。同时，MVCC 还可以提高并发性能，减少锁竞争和资源争用。</p><h4 id="2-3-事务隔离级别"><a href="#2-3-事务隔离级别" class="headerlink" title="2.3 事务隔离级别"></a>2.3 事务隔离级别</h4><p>PostgreSQL 支持多种事务隔离级别，用于控制事务之间的可见性和隔离程度。常见的事务隔离级别包括读未提交（Read Uncommitted）、读已提交（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）等。不同的隔离级别对事务的并发性能和数据一致性有不同的影响，开发人员可以根据实际需求选择合适的隔离级别。</p><h3 id="3-并发控制优化"><a href="#3-并发控制优化" class="headerlink" title="3. 并发控制优化"></a>3. 并发控制优化</h3><p>为了提高并发控制的性能和效率，PostgreSQL 还提供了一些优化功能和参数配置选项。例如，开发人员可以通过调整锁的粒度和使用 MVCC 来减少锁竞争和提高并发性能。同时，还可以通过调整事务隔离级别和优化查询计划来提高数据库的并发处理能力。</p><h3 id="4-性能监控和调优"><a href="#4-性能监控和调优" class="headerlink" title="4. 性能监控和调优"></a>4. 性能监控和调优</h3><p>除了静态优化之外，PostgreSQL 还支持实时性能监控和动态调优功能。开发人员可以通过监控系统的并发负载、锁竞争和死锁情况等指标，及时发现并发性能瓶颈，并采取相应的优化措施。同时，还可以通过调整数据库参数和配置文件来优化并发控制和系统性能。</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>PostgreSQL 支持 ACID（Atomicity、Consistency、Isolation、Durability）特性，可以确保事务的原子性、一致性、隔离性和持久性。它使用了 WAL 技术和 MVCC 技术来实现事务管理。WAL 技术可以确保事务的持久性，而 MVCC 技术可以确保事务的隔离性。此外，PostgreSQL 还提供了丰富的事务控制和回滚机制，包括 SAVEPOINT、ROLLBACK TO SAVEPOINT 等，以满足不同场景下的事务需求。</p><h2 id="高可用性和容错性"><a href="#高可用性和容错性" class="headerlink" title="高可用性和容错性"></a>高可用性和容错性</h2><p>PostgreSQL 提供了多种高可用性和容错性的解决方案，包括流复制、热备份、故障切换、自动故障检测和恢复等。这些功能可以确保数据库系统在发生故障时能够快速恢复，并保证数据的安全性和可靠性。此外，PostgreSQL 还支持在线备份和恢复，可以在不影响数据库正常运行的情况下进行备份和恢复操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PostgreSQL 是一个功能强大、稳定可靠的关系型数据库管理系统，其实现涵盖了存储引擎、查询优化器、并发控制、事务管理等多个方面。它具有广泛的应用领域和丰富的功能特性，是构建可靠和高性能应用程序的理想选择。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
            <tag> open source </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Report</title>
      <link href="/2024/04/19/report/"/>
      <url>/2024/04/19/report/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么选取-Hexo"><a href="#为什么选取-Hexo" class="headerlink" title="为什么选取 Hexo"></a>为什么选取 Hexo</h1><p>Hexo 是一个快速、简洁且功能丰富的静态博客框架，基于 Node.js 开发。它允许用户使用 Markdown（或其他支持的标记语言）编写文章，并通过简单的命令将其转换为静态网页。</p><h6 id="Hexo-特点："><a href="#Hexo-特点：" class="headerlink" title="Hexo 特点："></a><strong>Hexo 特点：</strong></h6><ol><li><strong>简单易用：</strong>Hexo 的安装和配置都非常简单，使用者可以快速上手，无需太多专业知识。</li><li><strong>高效快速：</strong>由于 Hexo 是基于静态网页生成的，因此在网站访问速度上表现出色，且 Hexo 在生成静态页面时速度很快，即使在文章较多的情况下也能保持高效率。</li><li><strong>支持多种主题和插件：</strong>Hexo 提供了丰富的主题和插件，用户可以根据自己的喜好和需求进行选择和定制，从而打造出独具特色的博客。</li><li><strong>Markdown 写作：</strong>Hexo 支持使用 Markdown 格式编写文章，Markdown 是一种简单易懂的标记语言，让用户专注于内容创作而无需过多关注排版。</li><li><strong>Git 版本管理：</strong>Hexo 可以轻松与 Git 集成，使用户可以使用版本控制管理博客内容，方便多人协作和备份。</li><li><strong>丰富的功能：</strong>Hexo 不仅仅是一个静态博客生成器，还提供了许多有用的功能，如标签、分类、RSS 订阅等，使用户可以更好地管理和展示自己的内容。</li></ol><h1 id="博客页面布局"><a href="#博客页面布局" class="headerlink" title="博客页面布局"></a>博客页面布局</h1><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><img src="/2024/04/19/report/pic1.png" class="" title="背景图"><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><img src="/2024/04/19/report/pic2.png" class="" title="背景图"><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><img src="/2024/04/19/report/pic6.png" class="" title="背景图"><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><img src="/2024/04/19/report/pic5.png" class="" title="背景图"><h2 id="搜索文章功能"><a href="#搜索文章功能" class="headerlink" title="搜索文章功能"></a>搜索文章功能</h2><img src="/2024/04/19/report/pic3.png" class="" title="背景图"><h1 id="博客功能实现"><a href="#博客功能实现" class="headerlink" title="博客功能实现"></a>博客功能实现</h1><h2 id="Hexo-搭建个人博客"><a href="#Hexo-搭建个人博客" class="headerlink" title="Hexo 搭建个人博客"></a>Hexo 搭建个人博客</h2><ol><li>进入文件夹任意位置，点开 git bash，输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><ol start="2"><li><p>输入 hexo s ，如果出现 INFO Hexo is running at <a href="http://localhost:4000/">http://localhost:4000/</a>. Press Ctrl+C to stop. ，则表示创建成功，点开链接将会看到你初始化的博客界面。</p></li><li><p>接下来就可以寻找喜欢的主题模板构建属于自己的个性化博客界面。</p></li><li><p>通过 <code>hexo new [文章名称]</code> 新建博客，并在文章对应的 markdown 文件中添加 <code>tags</code> 和 <code>categories</code> 构建文章标签和分类页面。</p></li></ol><h2 id="Hexo-部署到-Github"><a href="#Hexo-部署到-Github" class="headerlink" title="Hexo 部署到 Github"></a>Hexo 部署到 Github</h2><ol><li><p>在 github 新建一个名为 lilian-r.github.io 的仓库，注意前缀要和自己 github 账号的名字相同，否则可能会报错。</p></li><li><p>进入 _config.yml 文件，找到 deploy 部分，更改其中的内容如下所示 deploy。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: </span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>安装 git 部署命令工具 npm install hexo-deployer-git –save。</p></li><li><p>最后输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成相关文件</span></span><br><span class="line">hexo d <span class="comment"># 部署到 github.io</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="博客制作过程中遇到的问题及其解决方法"><a href="#博客制作过程中遇到的问题及其解决方法" class="headerlink" title="博客制作过程中遇到的问题及其解决方法"></a>博客制作过程中遇到的问题及其解决方法</h1><ol><li>在 markdown 中的图片文件在网页上无法正常显示，后续通过安装 <code>hexo-asset-img</code> 并对图片存放位置与路径做相应的修改，成功解决。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 总结及反思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> report </tag>
            
            <tag> conclusion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活不如意，多看老友记</title>
      <link href="/2024/04/19/friends-0/"/>
      <url>/2024/04/19/friends-0/</url>
      
        <content type="html"><![CDATA[<h1 id="Friends"><a href="#Friends" class="headerlink" title="Friends"></a>Friends</h1><p><em><strong>Welcome to the real world. It sucks. You’re gonna love it!</strong></em><br>欢迎来到《老友记》！！！你一定会爱六人组的！经典美剧千千万，但《老友记》是我永远永远的乌托邦。</p><img src="/2024/04/19/friends-0/pic4.png" class="" title="背景图"><p>初看《老友记》的时候我觉得，二三十岁的人竟然那么幼稚，与我心中“合格的大人”相差甚远，但仔细一想，他们又恰恰映射着我们普通人的模样。<br><em><strong>Before I met you, my life was insignificant. | 认识你之前，我的人生微不足道。</strong></em><br>《老友记》是一部真正的群戏，重点在展现“朋友即家人一起度过的岁月“，而不是”主角和 Ta 的朋友们“。它所搭建的友情的乌托邦更是我们爱它的原因。Monica 14 岁就给自己未来的孩子起了名字，却把它慷慨地送给了 Rachel 的女儿——”我爱这个名字，但我更爱你“。他们六个人彼此爱护互相包容却也大胆吐槽，无论多么荒谬幼稚的行为，朋友们都能不约而同地一起疯闹。他们的友情永远不会变质。<br><em><strong>When you want to find a shoulder to lean on, tell me. I’ll be right there! | 当你想找一个肩膀依靠，告诉我，我马上到！<br>Lovers come and go in life, but friends are always friends. | 生命里面恋人来来去去，但朋友永远是朋友。</strong></em></p><img src="/2024/04/19/friends-0/pic3.png" class=""><p><em><strong>I thought that it mattered what I said or where I said it. Then I realized the only thing that matters is that you, you make me happier than I ever thought I could be.<br>我一直认为，求婚应该是在一个完美的地方，有一套完美的誓词，现在我明白了，求婚唯一重要的是有一个完美的对象，你带给了我想象不到的快乐。<br>Somtimes I may be away longer, like this. But I’ll still always come back, like this.<br>有时我可能不在你的身边，但你要记得，我总会回来的。</strong></em></p><img src="/2024/04/19/friends-0/pic1.jpg" class="" title="背景图"><p>这六个人是我从未谋面的挚友，二三十岁没有房子，跟朋友租住在一起也很幸福；梦想的职业可以是教授，也可以是厨师、按摩师；分手、离婚、失业… …都不是问题，请挺胸抬头继续把日子过得风生水起。不要怕”怪“和”与众不同“，生活没有标准模板。<br>《老友记》只是部喜剧，剧情更没什么宏大的设定。可这样平凡的故事，给了一代又一代人独自面对生活的勇气。我们一路磕磕绊绊成长，每当回忆起他们的故事，都能在最灰暗的日子里笑出声来.</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hobby </tag>
            
            <tag> entertainment </tag>
            
            <tag> 美剧 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
